# app/utils.py
"""
Utilitaires centralis√©s pour l'application de chatbot de formation.
Contient des fonctions d'assainissement d'entr√©es, de gestion de fichiers
et un service de donn√©es partag√©.
"""

import html
import json
import logging
import re
import time
import os
from functools import lru_cache
from pathlib import Path
from typing import Dict, Any, List, Optional, Tuple, Union
import app.globals as globs
engine = globs.llm_engine

logger = logging.getLogger(__name__)


def search_and_format_courses(query: str, k: int = 5):
    fs = globs.formation_search

    results = fs.search(query, k=k)

    internal = [r for r in results if r[0].get("_source") == "internal"]
    external = [r for r in results if r[0].get("_source") != "internal"]

    output = ""
    if internal:
        output += f"üíº {len(internal)} formation(s) interne(s) trouv√©e(s) :\n"
        output += "Voici des formations propos√©es par Beyond Expertise :\n"
        for meta, score in internal:
            output += f"\n {meta['titre']}\n"
            #output += f"  ID: {meta.get('ID', 'N/A')} ‚Äî Score: {score:.3f}\n"
            output += f"Objectifs : {meta.get('CAPACITES_ATTESTEES', 'non renseign√©')}  \n"
            output += f"Programme : {meta.get('ACTIVITES_VISEES', 'non renseign√©')}  \n"
            output += f"Emploi accessibles apr√®s la formation : {meta.get('TYPE_EMPLOI_ACCESSIBLES', 'non renseign√©')}  \n"
            output += f"Public vis√© : {meta.get('public', '')}  \n"
            output += f"Pr√©requis : {meta.get('prerequis', '')}  \n"
            output += f"\n\nAutre infos secondaires si l'utilisateur le demande :\n"
            output += f"  Lieu : {meta.get('lieu', '')}\n"
            output += f"  Tarif : {meta.get('tarif', '')}\n"
            output += f"  Dur√©e : {meta.get('duree', '')}\n"
            output += f"  Certifiante : {meta.get('certifiant', '')}\n"
            output += f"  Modalit√© : {meta.get('modalite', '')}\n"
    elif external:
        # Filtrer les formations avec score > 0.30
        valid_results = [(meta, score) for meta, score in external if score > 0.30]

        if valid_results:
            output += f"üìö {len(valid_results)} formation(s) RNCP trouv√©e(s) :\n"
            output += "Voici des formations du RNCP que j'ai trouv√© pour toi :\n"
            for meta, score in valid_results:
                output += f"Score : {score}"
                output += f"\n {meta['titre']}\n"
                output += f" ID  : {meta.get('ID', 'N/A')}\n"
                output += f" Programme : {meta.get('ACTIVITES_VISEES', 'N/A')}\n"
                output += f" Objectifs : {meta.get('CAPACITES_ATTESTEES', 'N/A')}\n"
                output += f" URL(s) : {extract_urls_from_text(meta.get('LIEN_URL_DESCRIPTION', 'N/A'))}\n"
                output += f"  Certificateur  : {meta.get('CERTIFICATEURS', 'N/A')}\n"
                output += f"  Niveau : {meta.get('ABREGE_LIBELLES', '')}\n"
                output += f"  Emplois : {meta.get('TYPE_EMPLOI_ACCESSIBLES', '')}\n"
        else:
            #output += "Aucune formation RNCP pertinente trouv√©e."
            False

    else:   
        #output = "Aucune formation trouv√©e."
        False

    source_type = "internal" if internal else "external"
    print(f"\n\nR√©sultats : \n{output}\n\n")
    return output.strip(), source_type

# --------------------------------------------------
# Fonctions d'assainissement des entr√©es
# --------------------------------------------------
def extract_urls_from_text(text):
    url_pattern = re.compile(r'https?:\/\/[^\s\[\]\n]+')
    urls = url_pattern.findall(text)
    for url in urls:
        print(url)

def normalize_course(course: dict) -> dict:
    """
    Harmonise les cl√©s et compl√®te les valeurs manquantes d'un cours.
    - corrige les variantes d'orthographe ('duree' ‚ûú 'dur√©e', etc.)
    - force la pr√©sence d'un champ 'id' et d'un champ 'certifiant'
    """
    if not isinstance(course, dict):
        return {}

    mapping = {
        "duree": "dur√©e",
        "duration": "dur√©e",
        "modalite": "modalit√©",
        "title": "titre"
    }
    for old, new in mapping.items():
        if old in course and new not in course:
            course[new] = course.pop(old)
    
    # Champs obligatoires avec valeurs par d√©faut
    course.setdefault("id", course.get("titre", "").lower().replace(" ", "_"))
    course.setdefault("certifiant", False)
    course.setdefault("dur√©e", "Non sp√©cifi√©e")
    course.setdefault("modalit√©", "Non sp√©cifi√©e")
    course.setdefault("lieu", "Non sp√©cifi√©")
    course.setdefault("prochaines_sessions", "Non sp√©cifi√©es")

    return course


